% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotDTW.R
\name{plotDTW}
\alias{plotDTW}
\title{Dynamic Time Warping (DTW) Plot}
\usage{
plotDTW(query, timePoints_query, reference, timePoints_reference,
  alignment, title, ref_type = "l", ref_lty = 1, ref_lwd = 1.5,
  ref_col = "black", query_type = "l", query_lty = 1,
  query_lwd = 1.5, query_col = "red", cex_main = 1, cex_lab = 1.2,
  cex_axis = 1.2, xlabText = "Time",
  ylabText = "Gene Expression Values")
}
\arguments{
\item{query}{A vector containing temporal gene expression values of query}

\item{timePoints_query}{A vector containing time points of query}

\item{reference}{A vector containing temporal gene expression values of reference}

\item{timePoints_reference}{A vector containing time points of reference}

\item{alignment}{The output from dtw() function}

\item{title}{Title of the figure}

\item{ref_type}{Reference plot type: "p": Points, "l": Lines, "b": Both. "l"=default}

\item{ref_lty}{Reference plot line type: 1:solid, 2:dashed, 3:dotted, 4:dotdash, 5:longdash, 6:twodash. 1=default}

\item{ref_lwd}{Reference plot line line width. 1.5=default}

\item{ref_col}{Reference plot color. "black"=default}

\item{query_type}{Query plot type: "p": Points, "l": Lines, "b": Both. "l"=default}

\item{query_lty}{Query plot line type: 1:solid, 2:dashed, 3:dotted, 4:dotdash, 5:longdash, 6:twodash. 1=default}

\item{query_lwd}{Query plot line line width. Default:1.5}

\item{query_col}{Query plot color. "red"=default}

\item{cex_main}{The title fond size. 1=default, 1.5 is 50\% larger, 0.5 is 50\% smaller, etc.}

\item{cex_lab}{Magnification of x and y labels relative to cex}

\item{cex_axis}{Magnification of axis annotation relative to cex}

\item{xlabText}{X-axis label text. "Time"=default}

\item{ylabText}{Y-axis label text. "Gene Expression Values"=default}
}
\value{
It returns a plot.
}
\description{
This function plots temporal alignment of query and reference
}
\examples{
data(simData)
data=simdata$TimeShift_10
gene=data$gene
query=data$query
timePoints_query=data$timePoints_query
reference=data$reference
timePoints_reference=data$timePoints_reference
alignment=dtw(query,reference)
dtw_results=list(alignment$index1,alignment$index2)
index_1=dtw_results[[1]]
index_2=dtw_results[[2]]
aligned_values_query=query[index_1]
aligned_values_reference=reference[index_2]
aligned_timePoints_query=timePoints_query[index_1]
aligned_timePoints_reference=timePoints_reference[index_2]
index_alignableRegion=alignableRegionIndex(aligned_timePoints_query,aligned_timePoints_reference)
alignableRegion_values_query=aligned_values_query[index_alignableRegion]
alignableRegion_values_reference=aligned_values_reference[index_alignableRegion]
alignableRegion_timePoints_query=aligned_timePoints_query[index_alignableRegion]
alignableRegion_timePoints_reference=aligned_timePoints_reference[index_alignableRegion]
percentageAlignmentQuery=percentageAlignment(timePoints_query,
                         timePoints_reference,
                         alignableRegion_timePoints_query,
                         alignableRegion_timePoints_reference)['percentage_alignment_query']
percentageAlignmentReference=percentageAlignment(timePoints_query,
                             timePoints_reference,
                             alignableRegion_timePoints_query,
                             alignableRegion_timePoints_reference)['percentage_alignment_reference']
Rho=spearmanCorrelation(alignableRegion_values_query,alignableRegion_values_reference)
pValueRho=getPValueRho(Rho,query,timePoints_query,reference,timePoints_reference)
alignableRegion_timePoints_query_merged=mergeReferencePoints(alignableRegion_timePoints_query,
                                        alignableRegion_timePoints_reference)["aligned_timePoints_query_merged"][[1]]
alignableRegion_timePoints_reference_merged=mergeReferencePoints(alignableRegion_timePoints_query,
                                            alignableRegion_timePoints_reference)["aligned_timePoints_reference_merged"][[1]]
segmentedRegression_out=segmentedRegression(alignableRegion_timePoints_query_merged,
                        alignableRegion_timePoints_reference_merged)
breakPointsMatrix=fetchBreakPoints(segmentedRegression_out)
PAS=getPAS(segmentedRegression_out)$PAS
PASVector=getPAS(segmentedRegression_out)$PASVector
plotDTW(query,timePoints_query,reference,timePoints_reference,alignment,title="DTW")



}
\author{
Peng Jiang \email{PJiang@morgridge.org}
}
